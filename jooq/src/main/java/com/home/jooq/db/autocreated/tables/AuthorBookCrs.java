/*
 * This file is generated by jOOQ.
 */
package com.home.jooq.db.autocreated.tables;


import com.home.jooq.db.autocreated.Keys;
import com.home.jooq.db.autocreated.Public;
import com.home.jooq.db.autocreated.tables.records.AuthorBookCrsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * Кросс таблица: авторы-книги
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthorBookCrs extends TableImpl<AuthorBookCrsRecord> {

    private static final long serialVersionUID = -235122607;

    /**
     * The reference instance of <code>public.author_book_crs</code>
     */
    public static final AuthorBookCrs AUTHOR_BOOK_CRS = new AuthorBookCrs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthorBookCrsRecord> getRecordType() {
        return AuthorBookCrsRecord.class;
    }

    /**
     * The column <code>public.author_book_crs.id</code>.
     */
    public final TableField<AuthorBookCrsRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.author_book_crs.author_id</code>. Идентификатор автора
     */
    public final TableField<AuthorBookCrsRecord, Long> AUTHOR_ID = createField(DSL.name("author_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "Идентификатор автора");

    /**
     * The column <code>public.author_book_crs.book_id</code>. Идентификатор книги
     */
    public final TableField<AuthorBookCrsRecord, Long> BOOK_ID = createField(DSL.name("book_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "Идентификатор книги");

    /**
     * Create a <code>public.author_book_crs</code> table reference
     */
    public AuthorBookCrs() {
        this(DSL.name("author_book_crs"), null);
    }

    /**
     * Create an aliased <code>public.author_book_crs</code> table reference
     */
    public AuthorBookCrs(String alias) {
        this(DSL.name(alias), AUTHOR_BOOK_CRS);
    }

    /**
     * Create an aliased <code>public.author_book_crs</code> table reference
     */
    public AuthorBookCrs(Name alias) {
        this(alias, AUTHOR_BOOK_CRS);
    }

    private AuthorBookCrs(Name alias, Table<AuthorBookCrsRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuthorBookCrs(Name alias, Table<AuthorBookCrsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Кросс таблица: авторы-книги"), TableOptions.table());
    }

    public <O extends Record> AuthorBookCrs(Table<O> child, ForeignKey<O, AuthorBookCrsRecord> key) {
        super(child, key, AUTHOR_BOOK_CRS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<AuthorBookCrsRecord> getPrimaryKey() {
        return Keys.PK_AUTHOR_BOOK_CRS_ID;
    }

    @Override
    public List<UniqueKey<AuthorBookCrsRecord>> getKeys() {
        return Arrays.<UniqueKey<AuthorBookCrsRecord>>asList(Keys.PK_AUTHOR_BOOK_CRS_ID);
    }

    @Override
    public List<ForeignKey<AuthorBookCrsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AuthorBookCrsRecord, ?>>asList(Keys.AUTHOR_BOOK_CRS__FK_AUTHOR_BOOK_CRS_AUTHOR, Keys.AUTHOR_BOOK_CRS__FK_AUTHOR_BOOK_CRS_BOOK);
    }

    public Author author() {
        return new Author(this, Keys.AUTHOR_BOOK_CRS__FK_AUTHOR_BOOK_CRS_AUTHOR);
    }

    public Book book() {
        return new Book(this, Keys.AUTHOR_BOOK_CRS__FK_AUTHOR_BOOK_CRS_BOOK);
    }

    @Override
    public AuthorBookCrs as(String alias) {
        return new AuthorBookCrs(DSL.name(alias), this);
    }

    @Override
    public AuthorBookCrs as(Name alias) {
        return new AuthorBookCrs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthorBookCrs rename(String name) {
        return new AuthorBookCrs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthorBookCrs rename(Name name) {
        return new AuthorBookCrs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
